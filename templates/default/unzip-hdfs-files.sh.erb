#!/bin/bash

help() {
  echo "usage: $0 localWorkdir srcFileInHdfs HDFS_USER"
  exit 1
}

if [ $# -ne 3 ] ; then
  help
fi

workdir=$1
hdfsFile=$2
HDFS_USER=$3

#FSM states: STAGING, UNZIPPING, UPLOADING, CHOWNING, SUCCESS, FAILED
fsmFile=$1/fsm.txt

function finish {
    rm -rf $workdir
}
trap finish EXIT

function check_error {
    if [ $? -ne 0 ] ; then
       echo "FAILED" > $1/fsm.txt	
    fi
    exit 1
}


prefix='hdfs://'
normalizedPath=${hdfsFile#${prefix}}
check_error

file=$(basename $normalizedPath)
check_error
dir=$(dirname "${normalizedPath}")
check_error

filedir="${file%%.*}"
check_error
hdfsDir=${dir}/${filedir}

cd $workdir
check_error

filename=$(basename "$2")

echo "STAGING" > $1/fsm.txt
<%= node["hops"]["base_dir"] %>/bin/hdfs dfs -copyToLocal $hdfsFile $workdir
check_error

echo "UNZIPPING" > $1/fsm.txt

# State Machine State Change. File now staged to local FS.
# Java program checks if this file is written to see if this file exists:  $workdir/$(basename $hdfsfile)


# http://manpages.ubuntu.com/manpages/trusty/en/man1/dtrx.1.html
# , everything will be written to  a  dedicated  directory  that's named  after  the  archive.
# dtrx will also change the permissions to  ensure that the owner can read and write all those files.

cd $workdir
dtrx -o -n $file
check_error

# State Machine State Change. File now extracted to local FS.
# Java program checks if this file is written to see if this directory exists:  $workdir/$(basename $hdfsfile)


#filedir="${file%%.*}"
#stripped=${dir}/${filedir}

# case "$file" in 
#   *.tar.gz)
#      stripped=$(basename $hdfsFile .tar.gz)
#      mkdir -p $stripped
#      tar zxf $file -C ./$stripped
#     ;;
#   *.bz2)
#      stripped=$(basename $hdfsFile .bz2)
#      mkdir -p $stripped
#      tar jxf $file -C ./$stripped
#     ;;
#   *.bzip2)
#      stripped=$(basename $hdfsFile .bz2)
#      mkdir -p $stripped
#      tar jxf $file -C ./$stripped
#     ;;
#   *.tgz)
#      stripped=$(basename $hdfsFile .tgz)
#      mkdir -p $stripped
#      tar zxf $file -C ./$stripped
#     ;;
#   *.gz)
#      stripped=$(basename $hdfsFile .gz)
#      mkdir -p $stripped
#      gunzip -d -c $file > ./$stripped
#     ;;
#   *.7z)
#      stripped=$(basename $hdfsFile .7z)
#      mkdir -p $stripped
#      7z x  $file  -o${stripped}
#     ;;
#   *.rar)
#      stripped=$(basename $hdfsFile .rar)
#      mkdir -p $stripped
#      7z x  $file  -o${stripped}
#     ;;
#   *.zip)
#      stripped=$(basename $hdfsFile .zip)
#      mkdir -p $stripped
#      unzip $file -d ./$stripped
#     ;;
#   *)
#     help
#     ;;
# esac

echo "UPLOADING" > $1/fsm.txt
<%= node["hops"]["base_dir"] %>/bin/hdfs dfs -copyFromLocal ./$filedir $dir
check_error

echo "CHOWNING" > $1/fsm.txt
<%= node["hops"]["base_dir"] %>/bin/hdfs dfs -chown -R ${HDFS_USER} $hdfsDir
check_error

echo "SUCCESS" > $1/fsm.txt

